// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package netra_mocks

import (
	"context"
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewMockBackend creates a new instance of MockBackend. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBackend(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBackend {
	mock := &MockBackend{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBackend is an autogenerated mock type for the Backend type
type MockBackend struct {
	mock.Mock
}

type MockBackend_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBackend) EXPECT() *MockBackend_Expecter {
	return &MockBackend_Expecter{mock: &_m.Mock}
}

// HeartBeat provides a mock function for the type MockBackend
func (_mock *MockBackend) HeartBeat(ctx context.Context, lockName string, nodeID string, ttl time.Duration) error {
	ret := _mock.Called(ctx, lockName, nodeID, ttl)

	if len(ret) == 0 {
		panic("no return value specified for HeartBeat")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, time.Duration) error); ok {
		r0 = returnFunc(ctx, lockName, nodeID, ttl)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBackend_HeartBeat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HeartBeat'
type MockBackend_HeartBeat_Call struct {
	*mock.Call
}

// HeartBeat is a helper method to define mock.On call
//   - ctx
//   - lockName
//   - nodeID
//   - ttl
func (_e *MockBackend_Expecter) HeartBeat(ctx interface{}, lockName interface{}, nodeID interface{}, ttl interface{}) *MockBackend_HeartBeat_Call {
	return &MockBackend_HeartBeat_Call{Call: _e.mock.On("HeartBeat", ctx, lockName, nodeID, ttl)}
}

func (_c *MockBackend_HeartBeat_Call) Run(run func(ctx context.Context, lockName string, nodeID string, ttl time.Duration)) *MockBackend_HeartBeat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(time.Duration))
	})
	return _c
}

func (_c *MockBackend_HeartBeat_Call) Return(err error) *MockBackend_HeartBeat_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBackend_HeartBeat_Call) RunAndReturn(run func(ctx context.Context, lockName string, nodeID string, ttl time.Duration) error) *MockBackend_HeartBeat_Call {
	_c.Call.Return(run)
	return _c
}

// TryLock provides a mock function for the type MockBackend
func (_mock *MockBackend) TryLock(ctx context.Context, lockName string, nodeID string, ttl time.Duration) error {
	ret := _mock.Called(ctx, lockName, nodeID, ttl)

	if len(ret) == 0 {
		panic("no return value specified for TryLock")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, time.Duration) error); ok {
		r0 = returnFunc(ctx, lockName, nodeID, ttl)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBackend_TryLock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TryLock'
type MockBackend_TryLock_Call struct {
	*mock.Call
}

// TryLock is a helper method to define mock.On call
//   - ctx
//   - lockName
//   - nodeID
//   - ttl
func (_e *MockBackend_Expecter) TryLock(ctx interface{}, lockName interface{}, nodeID interface{}, ttl interface{}) *MockBackend_TryLock_Call {
	return &MockBackend_TryLock_Call{Call: _e.mock.On("TryLock", ctx, lockName, nodeID, ttl)}
}

func (_c *MockBackend_TryLock_Call) Run(run func(ctx context.Context, lockName string, nodeID string, ttl time.Duration)) *MockBackend_TryLock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(time.Duration))
	})
	return _c
}

func (_c *MockBackend_TryLock_Call) Return(err error) *MockBackend_TryLock_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBackend_TryLock_Call) RunAndReturn(run func(ctx context.Context, lockName string, nodeID string, ttl time.Duration) error) *MockBackend_TryLock_Call {
	_c.Call.Return(run)
	return _c
}

// TryUnlock provides a mock function for the type MockBackend
func (_mock *MockBackend) TryUnlock(ctx context.Context, lockName string, nodeID string) error {
	ret := _mock.Called(ctx, lockName, nodeID)

	if len(ret) == 0 {
		panic("no return value specified for TryUnlock")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, lockName, nodeID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBackend_TryUnlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TryUnlock'
type MockBackend_TryUnlock_Call struct {
	*mock.Call
}

// TryUnlock is a helper method to define mock.On call
//   - ctx
//   - lockName
//   - nodeID
func (_e *MockBackend_Expecter) TryUnlock(ctx interface{}, lockName interface{}, nodeID interface{}) *MockBackend_TryUnlock_Call {
	return &MockBackend_TryUnlock_Call{Call: _e.mock.On("TryUnlock", ctx, lockName, nodeID)}
}

func (_c *MockBackend_TryUnlock_Call) Run(run func(ctx context.Context, lockName string, nodeID string)) *MockBackend_TryUnlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockBackend_TryUnlock_Call) Return(err error) *MockBackend_TryUnlock_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBackend_TryUnlock_Call) RunAndReturn(run func(ctx context.Context, lockName string, nodeID string) error) *MockBackend_TryUnlock_Call {
	_c.Call.Return(run)
	return _c
}
